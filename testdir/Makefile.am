INCLUDES = -I$(top_srcdir)/libsrc \
	-I$(top_srcdir)/volume_io/Include \
	-I$(top_builddir)/volume_io/Include

script_tests = \
	run_tests.sh \
	run_test2.sh \
	xfmconcat_01.sh \
	xfmconcat_02.sh

all-local:
	cd $(srcdir) && chmod +x $(script_tests)

LDADD = ../libvolume_io2.la ../libminc2.la
TESTS = run_tests.sh \
	run_test2.sh \
	xfmconcat_01.sh \
	xfmconcat_02.sh \
	mincapi

check_PROGRAMS = minc test_mconv minc_types icv icv_range \
	icv_dim test_speed icv_dim1 icv_fillvalue \
	test_xfm create_grid_xfm mincapi test_speed

EXTRA_DIST = $(script_tests) $(expect_files) t1.xfm

CLEANFILES = test.mnc _*

# The test script "run_tests.sh" uses a series of "expected output"
# files, comparing each with the output generated by the file under
# test.  We need to distribute these files (so they are in
# EXTRA_DIST).
#
expect_files = icv.out icv_dim.out icv_dim1.out icv_fillvalue.out	\
	icv_range.out minc_types.out

# Unfortunately, GNU make has implicit rules for files with the suffix
# ".out".  The following lines disable implicit rules.  In future, we
# should probably use a different naming scheme for these files ...
# 
icv.out: ;
icv_dim.out: ;
icv_dim1.out: ;
icv_fillvalue.out: ;
icv_range.out: ;
minc_types.out: ;

